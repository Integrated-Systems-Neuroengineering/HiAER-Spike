[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to HiAER-Spike v0.1.0",
    "section": "",
    "text": "Welcome to HiAER-Spike v0.1.0\nHiAER-Spike is a python library for interacting with the ISN CRI project hosted at the San Diego Supercomputer (SDSC). This project aims to make massive scale simulations of spiking neural networks easily accessible to the research community, and in particular researches interested in neuromorphic computing for artificial intelligence and neuroscience researchers. This library allows a user to define a spiking neural network and execute it on one of two backends: the CRI neuromorphic hardware or if the hardware is not available a python simulation of the hardware."
  },
  {
    "objectID": "menu/api/overview.html",
    "href": "menu/api/overview.html",
    "title": "Overview",
    "section": "",
    "text": "hs_api is a python library for interacting with the ISN CRI project hosted at SDSC. This project aims to make massive scale simulations of spiking neural networks easily accessible to the research community, and in particular researchers interested in neuromorphic computing for artificial intelligence and neuroscience. This library allows a user to define a spiking neural network and execute it on one of two backends:\n\nthe CRI neuromorphic hardware or\na python simulation of the hardware\n\nCheck out the Usage section for further information."
  },
  {
    "objectID": "menu/api/overview.html#introduction",
    "href": "menu/api/overview.html#introduction",
    "title": "Overview",
    "section": "",
    "text": "hs_api is a python library for interacting with the ISN CRI project hosted at SDSC. This project aims to make massive scale simulations of spiking neural networks easily accessible to the research community, and in particular researchers interested in neuromorphic computing for artificial intelligence and neuroscience. This library allows a user to define a spiking neural network and execute it on one of two backends:\n\nthe CRI neuromorphic hardware or\na python simulation of the hardware\n\nCheck out the Usage section for further information."
  },
  {
    "objectID": "menu/api/overview.html#installation",
    "href": "menu/api/overview.html#installation",
    "title": "Overview",
    "section": "Installation",
    "text": "Installation\n\nSimple Installation\n$ pip install hs_api\n\n\nDevelopment Installation\n\nFirst install Poetry\n\nIf Poetry doesn’t install it may be necessary to install an alternative Python distribution such as Conda\n\nClone the following dependencies and the hs_api repo:\n\n# Dependencies\n$ git clone https://github.com/Integrated-Systems-Neuroengineering/connectome_utils.git\n$ git clone  https://github.com/Integrated-Systems-Neuroengineering/hs_bridge.git\n\n# API repo\n$ git clone https://github.com/Integrated-Systems-Neuroengineering/hs_api.git\n\ncd into the hs_api repo you cloned and install the needed dependencies. Resolving dependencies may take a while.\n\n$ cd hs_api\n$ poetry install\n\nFinally activate the development environment\n\n$ poetry shell"
  },
  {
    "objectID": "menu/api/submitting-jobs.html",
    "href": "menu/api/submitting-jobs.html",
    "title": "HiAER-Spike",
    "section": "",
    "text": "The same Python scripts you’ve developed and run on your local machine can be deployed to the CRI servers to run on the actual CRI hardware. Just make sure all the libraries you import in your script are available on the CRI servers. The CRI hardware is hosted in the San Diego Supercomputing Center and jobs may be submitted to run on the hardware via the Neuroscience Gateway. First you must register an account with Neuroscience Gateway in order to submit jobs. Perform the following steps to submit a task to NSG\n\nPut your CRI Python script in a folder of any name, then zip the folder\nLog into NSG.\n\n\n\nCreate a task folder if there is none listed on the upper left. It’s a place to hold related jobs.\n\n\n\nClick on data, and save the previously created zip file as the data. Here ‘data’ is ambiguous - it is the job and its data.\nClick on task.\nCreate a new task if needed (or clone an old one).\nAssign the zip you just uploaded as data as the input to the task.\nSelect Python for CRI as the software to run.\nSet parameters for the task:\n\nSet execution ‘wall time’, cores, and GB of DRAM if you wish. Please be consideret to others and only request the hardware you need.\nEnter the name of your.py python scrip as the “input” using the same name as is in the zip folder.\nEnter a name for the “output” (optional)\n\nClick save parameters\nClick save and run to run the task.\nClick OK on the popup or the job will not start.\nClick on task again in your folder at the upper left if the task list is not present.\nView status if desired, refresh as needed, or just watch for the task done email.\nWhen it is done select the ‘view output’ for that task on the task list.\nDownload outputs and decompress. Job ‘inputs’ is displayed as garbage."
  },
  {
    "objectID": "menu/api/submitting-jobs.html#submitting-jobs-to-run-on-the-cri-hardware",
    "href": "menu/api/submitting-jobs.html#submitting-jobs-to-run-on-the-cri-hardware",
    "title": "HiAER-Spike",
    "section": "",
    "text": "The same Python scripts you’ve developed and run on your local machine can be deployed to the CRI servers to run on the actual CRI hardware. Just make sure all the libraries you import in your script are available on the CRI servers. The CRI hardware is hosted in the San Diego Supercomputing Center and jobs may be submitted to run on the hardware via the Neuroscience Gateway. First you must register an account with Neuroscience Gateway in order to submit jobs. Perform the following steps to submit a task to NSG\n\nPut your CRI Python script in a folder of any name, then zip the folder\nLog into NSG.\n\n\n\nCreate a task folder if there is none listed on the upper left. It’s a place to hold related jobs.\n\n\n\nClick on data, and save the previously created zip file as the data. Here ‘data’ is ambiguous - it is the job and its data.\nClick on task.\nCreate a new task if needed (or clone an old one).\nAssign the zip you just uploaded as data as the input to the task.\nSelect Python for CRI as the software to run.\nSet parameters for the task:\n\nSet execution ‘wall time’, cores, and GB of DRAM if you wish. Please be consideret to others and only request the hardware you need.\nEnter the name of your.py python scrip as the “input” using the same name as is in the zip folder.\nEnter a name for the “output” (optional)\n\nClick save parameters\nClick save and run to run the task.\nClick OK on the popup or the job will not start.\nClick on task again in your folder at the upper left if the task list is not present.\nView status if desired, refresh as needed, or just watch for the task done email.\nWhen it is done select the ‘view output’ for that task on the task list.\nDownload outputs and decompress. Job ‘inputs’ is displayed as garbage."
  },
  {
    "objectID": "menu/api/submitting-jobs.html#python-libraries-installed-on-the-cri-servers",
    "href": "menu/api/submitting-jobs.html#python-libraries-installed-on-the-cri-servers",
    "title": "HiAER-Spike",
    "section": "Python libraries installed on the CRI servers",
    "text": "Python libraries installed on the CRI servers\n\n\n\nLibrary\nVersion\n\n\n\n\nabsl-py\n1.1.0\n\n\nbidict\n0.22.0\n\n\nbrotlipy\n0.7.0\n\n\ncertifi\n2021.10.8\n\n\ncffi\n1.15.0\n\n\ncharset-normalizer\n2.0.4\n\n\nclick\n8.1.3\n\n\ncolorama\n0.4.4\n\n\nconda\n4.12.0\n\n\nconda-content-trust\n0+unknown\n\n\nconda-package-handling\n1.8.1\n\n\nconfuse\n1.7.0\n\n\ncri-simulations\n0.1.2\n\n\ncryptography\n36.0.0\n\n\ncycler\n0.11.0\n\n\nfbpca\n1.0\n\n\nfonttools\n4.33.3\n\n\nidna\n3.3\n\n\njoblib\n1.1.0\n\n\nk-means-constrained\n0.7.1\n\n\nkiwisolver\n1.4.3\n\n\nl2s\n0.1.3\n\n\nllvmlite\n0.38.1\n\n\nmatplotlib\n3.5.2\n\n\nmetis\n0.2a5\n\n\nnetworkx\n2.8.4\n\n\nnumba\n0.55.2\n\n\nnumpy\n1.22.4\n\n\nortools\n9.3.10497\n\n\npackaging\n21.3\n\n\nPillow\n9.1.1\n\n\npip\n21.2.4\n\n\nprotobuf\n4.21.1\n\n\npycosat\n0.6.3\n\n\npycparser\n2.21\n\n\nPyMetis\n2020.1\n\n\npyOpenSSL\n22.0.0\n\n\npyparsing\n3.0.9\n\n\nPySocks\n1.7.1\n\n\npython-dateutil\n2.8.2\n\n\nPyYAML\n6.0\n\n\nrequests\n2.27.1\n\n\nruamel-yaml-conda\n0.15.100\n\n\nscikit-learn\n1.1.1\n\n\nscipy\n1.8.1\n\n\nsetuptools\n61.2.0\n\n\nsix\n1.16.0\n\n\nsklearn\n0.0\n\n\nthreadpoolctl\n3.1.0\n\n\ntqdm\n4.63.0\n\n\nurllib3\n1.26.8\n\n\nwheel\n0.37.1"
  },
  {
    "objectID": "menu/api/usage.html",
    "href": "menu/api/usage.html",
    "title": "Usage",
    "section": "",
    "text": "Running on the Simulator\nOn your local machine you can run networks using the Python based simulator of the CRI hardware.\n\n\nDefining a Network\nUsers are expected to provide three data structures in order to define a network\n\nDefining the Configuration Dictionary\nThe configuration dictionary specifies a few properties that are shared by every neuron in the network\n\nneuron_type specifies the type of neuron model used to calculate membrane potentials\nglobal_neuron_params is a sub-dictionary of the configuration dictionary\n\nv_thr is an entry in the global_neuron_params dictionary, it sets the membrane potential threshold for all neurons in the network\n\n\nconfiguration = {}\nconfiguration[neuron_type'] = I&F\nconfiguration['global_neuron_params'] = {}\nconfiguration['global_neuron_params']['v_thr'] = 4\n\nDefining the Axons Dictionary\nThe axons dictionary configures inputs to the network. Axons are synapses connected to neurons in the network that the user can manually send spikes over at a given timestep. Each key in the dictionary is the name of an axon. Each value is a list of two element tuples. Each tuple defines an in-going synapse to a neuron. The first element is the name of a neuron in the network and the second element is the weight of the synaptic connection. Synapse weights must be integers, but they may be positive or negative.\n\naxons = {'alpha': [('a', 3)], 'beta': [('d', 3)]}\n\nDefining the Connections Dictionary:\nThe connections dictionary defines the neurons in the network and the connections between them. Each key in the dictionary is the name of a neuron. Of note the names of neurons in the connections dictionary and the names of axons in the axons dictionary must be mutually exclusive. Each value is a list of two element tuples. Each tuple defines a synapse between neurons in the network. The first element is the name of the postsynaptic neuron and the the second element is the weight of the synapse. Synapse weights must be integers but they may be positive or negative. If a neuron has no outgoing synapses it’s synapse list may be left empty.\n\nconnections = {'a': [('b', 1)], 'b': [], 'c': [], 'd': [('c', 1)]}\n\nDefining the Outputs List:\nThe outputs list defines the neurons in the network the user wishes to receive spikes from. Each element in the list is the key of a neuron in the connections dictionary.\n\noutputs = ['a', 'b']\n\n\nDefining Stochastic Behavior\nHiAER-Spike supports randomly perturbing the membrane potential of neurons at each timestep of execution. To enable this perturbation the perturb variable is set to True. The amplitude of this perturbation can also be scaled by setting the perturbMag variable (default = 0). perturbMag takes integer values between 0 and 18 and multiplies the random noise to be added to the membrane potential by 2perturbMag.\nperturb = True\nperturbMag = 2\n\n\nInitializing a network\nOnce we’ve defined the above dictionaries and list we must pass them to the CRI_network constructor to create a CRI_network object.\nnetwork = CRI_network(\n    axons=axons,\n    connections=connections,\n    config=config,\n    outputs=outputs,\n    perturb=perturb,\n    perturbMag=perturbMag\n)\n\n\nRunning a Timestep\nOnce we’ve constructed an CRI_network object we can run a timestep. We do so by calling the step() method of CRI_network. This method expects a single input called inputs. Inputs defines the inputs to the network at the current timestep, in particular it is a list of names of axons that you wish to carry spikes into the network at the current timestep. Normally network.step() returns a list of the keys that correspond to neurons that spiked during the given timestep, however the membranePotential parameter can be set to True to additionally output the membranePotentials for all neurons in the network.\ninputs = ['alpha','beta']\nspikes = network.step(inputs)\n\n#Alternative\npotentials, spikes = network.step(inputs, membranePotential=True)\nThis method will return a list of membrane potentials for all neurons in the network after the current timestep has elapsed.\n\n\nUpdating Synapse Weights\nOnce the CRI_network class the topology of the network is fixed, that is what axon and neurons are in the network and how they are connected via synapses may not be changed. However it is possible to update the weight of preexisting synapses in the network. This can be done by calling the write_synapse() method of CRI_network. write_synapse() takes three arguments, the presynaptic neuron name, the postsynaptic neuron name, and the new synapse weight.\nnetwork.write_synapse('a', 'b', 2)"
  }
]